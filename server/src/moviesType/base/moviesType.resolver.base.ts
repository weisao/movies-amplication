/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMoviesTypeArgs } from "./CreateMoviesTypeArgs";
import { UpdateMoviesTypeArgs } from "./UpdateMoviesTypeArgs";
import { DeleteMoviesTypeArgs } from "./DeleteMoviesTypeArgs";
import { MoviesTypeFindManyArgs } from "./MoviesTypeFindManyArgs";
import { MoviesTypeFindUniqueArgs } from "./MoviesTypeFindUniqueArgs";
import { MoviesType } from "./MoviesType";
import { MoviesTypeService } from "../moviesType.service";

@graphql.Resolver(() => MoviesType)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class MoviesTypeResolverBase {
  constructor(
    protected readonly service: MoviesTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MoviesType",
    action: "read",
    possession: "any",
  })
  async _moviesTypesMeta(
    @graphql.Args() args: MoviesTypeFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MoviesType])
  @nestAccessControl.UseRoles({
    resource: "MoviesType",
    action: "read",
    possession: "any",
  })
  async moviesTypes(
    @graphql.Args() args: MoviesTypeFindManyArgs
  ): Promise<MoviesType[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MoviesType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MoviesType",
    action: "read",
    possession: "own",
  })
  async moviesType(
    @graphql.Args() args: MoviesTypeFindUniqueArgs
  ): Promise<MoviesType | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MoviesType)
  @nestAccessControl.UseRoles({
    resource: "MoviesType",
    action: "create",
    possession: "any",
  })
  async createMoviesType(
    @graphql.Args() args: CreateMoviesTypeArgs
  ): Promise<MoviesType> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MoviesType)
  @nestAccessControl.UseRoles({
    resource: "MoviesType",
    action: "update",
    possession: "any",
  })
  async updateMoviesType(
    @graphql.Args() args: UpdateMoviesTypeArgs
  ): Promise<MoviesType | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MoviesType)
  @nestAccessControl.UseRoles({
    resource: "MoviesType",
    action: "delete",
    possession: "any",
  })
  async deleteMoviesType(
    @graphql.Args() args: DeleteMoviesTypeArgs
  ): Promise<MoviesType | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
